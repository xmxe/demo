<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:*.properties" />

	<!-- 引入配置文件 
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:*.properties"/>
    </bean>-->

    <!-- 排除controller 不排除影响事务管理 -->
	<context:component-scan base-package="com.example">
		 <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan> 

	<!-- 配置dataSoure -->
	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${dataSource.url}"/>
        <property name="driverClassName" value="${dataSource.driverClassName}"/>
        <property name="username" value="${dataSource.username}"/>
        <property name="password" value="${dataSource.password}"/>
        <property name="initialSize" value="${dataSource.initialSize}"/>
        <property name="minIdle" value="${dataSource.minIdle}"/>
        <property name="maxActive" value="${dataSource.maxActive}"/>
        <property name="maxWait" value="${dataSource.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${dataSource.validationQuery}"/>
        <property name="validationQueryTimeout" value="${dataSource.validationQueryTimeout}"/>
        <property name="testWhileIdle" value="${dataSource.testWhileIdle}"/>
        <property name="testOnBorrow" value="${dataSource.testOnBorrow}"/>
        <property name="testOnReturn" value="${dataSource.testOnReturn}"/>
        <property name="poolPreparedStatements" value="${dataSource.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.maxPoolPreparedStatementPerConnectionSize}"/>
        <property name="filters" value="${dataSource.filters}"/>
        <!--下面这个参数是设置的运行超过3分钟的SQL被强杀，用来排查连接泄露-->
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
         <!--超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="180" />
         <!--关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
    </bean>
	
	<!-- 配置和Mybatis的整合 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定mybatis的映射文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口实现 -->
		<property name="basePackage" value="com.example.mapper"></property>
	</bean>
	
	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务增强-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="*" rollback-for="Exception"/><!--默认回滚机制是RuntimeException--> 
		</tx:attributes>
	</tx:advice>
<!-- 开启基于注解的事务，使用xml配置形式的事务 -->
	<aop:config>
		<!-- 切入点-->
		<aop:pointcut expression="execution(* com.example.service..*(..))" id="txPoint"/>
		<!-- 事务增强-->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
</beans>
